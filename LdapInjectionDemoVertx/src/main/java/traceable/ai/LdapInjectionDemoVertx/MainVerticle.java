package traceable.ai.LdapInjectionDemoVertx;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.core.http.HttpServerResponse;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;

import javax.naming.Context;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.*;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;
import java.util.Hashtable;


public class MainVerticle extends AbstractVerticle {

  @Override
  public void start(Promise<Void> startPromise) throws Exception {
    Router router = Router.router(vertx);

    router.route().handler(BodyHandler.create());
    router.get("/users/:id").handler(this::handleGetProduct);
    router.put("/users/:id").handler(this::handleAddProduct);

    vertx.createHttpServer().requestHandler(router).listen(8080);


  }

  private void sendError(int statusCode, HttpServerResponse response) {
    response.setStatusCode(statusCode).end();
  }
  private void handleGetProduct(RoutingContext routingContext) {
    String userId = routingContext.request().getParam("id");
    HttpServerResponse response = routingContext.response();


    if (userId == null) {
      sendError(400, response);
    } else {
      String ldapUrl = "ldap://localhost:3890";
      String bindDN = "cn=admin,dc=example,dc=org";
      String bindPassword = "admin";
      String searchBase = "dc=example,dc=org";

      try {
        // Set up the environment properties for the InitialLdapContext
        Hashtable<String, Object> env = new Hashtable<String, Object>();
        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
        env.put(Context.PROVIDER_URL, ldapUrl);
        env.put(Context.SECURITY_AUTHENTICATION, "simple");
        env.put(Context.SECURITY_PRINCIPAL, bindDN);
        env.put(Context.SECURITY_CREDENTIALS, bindPassword);


        // Create the InitialLdapContext object
        LdapContext ctx = new InitialLdapContext(env, null);
        String filter = "(cn=" + userId + ")";;


        // Perform a search
        SearchControls searchControls = new SearchControls();
        searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);
        NamingEnumeration<SearchResult> results = ctx.search(searchBase, filter, searchControls);

        // Print out the search results
        while (results.hasMore()) {
          SearchResult result = results.next();
          System.out.println(result.getNameInNamespace());
        }

        // Close the context
        ctx.close();

      } catch (NamingException e) {
        System.err.println("NamingException: " + e.getMessage());
      }
      response.putHeader("content-type", "application/json").end("Got user");
    }
  }

  private void handleAddProduct(RoutingContext routingContext) {
    String userID = routingContext.request().getParam("id");
    HttpServerResponse response = routingContext.response();
    if (userID == null) {
      sendError(400, response);
    } else {
      String ldapUrl = "ldap://localhost:3890";
      String bindDN = "cn=admin,dc=example,dc=org";
      String bindPassword = "admin";
      String searchBase = "dc=example,dc=org";

      try {
        // Set up the environment properties for the InitialLdapContext
        Hashtable<String, Object> env = new Hashtable<String, Object>();
        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
        env.put(Context.PROVIDER_URL, ldapUrl);
        env.put(Context.SECURITY_AUTHENTICATION, "simple");
        env.put(Context.SECURITY_PRINCIPAL, bindDN);
        env.put(Context.SECURITY_CREDENTIALS, bindPassword);

        // Add dummy data
        Attributes attributes = new BasicAttributes();
        Attribute objectClass = new BasicAttribute("objectclass");
        objectClass.add("top");
        objectClass.add("person");
        attributes.put(objectClass);
        attributes.put(new BasicAttribute("cn", userID));
        attributes.put(new BasicAttribute("sn", userID));


        // Create the InitialLdapContext object
        LdapContext ctx = new InitialLdapContext(env, null);

        String dn = "cn="+userID+","+searchBase;
        ctx.createSubcontext(dn, attributes);
        ctx.close();
      } catch (NamingException e) {
        System.err.println("NamingException: " + e.getMessage());
      }
      response.putHeader("content-type", "application/json").end("Added user");
    }
  }

}
