package traceable.ai.demo;

import com.mongodb.client.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


import com.mongodb.client.MongoClient;
import org.bson.Document;

@RestController
@RequestMapping("/people")
public class Controller {

    @Autowired
    private PeopleRepository peopleRepository;

    @GetMapping
    public List<LoginRequest> getAllPeople() {
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        MongoDatabase database = mongoClient.getDatabase("test");
        MongoCollection<Document> collection = database.getCollection("People");
        // Insert some dummy data into the collection
        Document doc1 = new Document("name", "John Doe")
                .append("age", 30)
                .append("email", "johndoe@example.com");
        Document doc2 = new Document("name", "Jane Doe")
                .append("age", 25)
                .append("email", "janedoe@example.com");
        Document doc3 = new Document("name", "Bob Smith")
                .append("age", 40)
                .append("email", "bobsmith@example.com");
        collection.insertMany(Arrays.asList(doc1, doc2, doc3));

        // Retrieve a specific document from the collection
        Document query = new Document("name", "John Doe");
        FindIterable<Document> result = collection.find(query);
        MongoCursor<Document> cursor = result.iterator();
        while (cursor.hasNext()) {
            Document document = cursor.next();
            System.out.println(document.toJson());
        }

        mongoClient.close();
        return peopleRepository.findAll();
    }

    @GetMapping("/{id}")
    public ResponseEntity<LoginRequest> getProductById(@PathVariable String id) {
        LoginRequest person = peopleRepository.findById(id).orElse(null);
        if (person == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(person);
    }

    @PutMapping("/{id}")
    public ResponseEntity<LoginRequest> updateProduct(@PathVariable String id, @RequestBody LoginRequest person) {
        LoginRequest existingPerson = peopleRepository.findById(id).orElse(null);
        if (existingPerson == null) {
            return ResponseEntity.notFound().build();
        }
        person.setId(id);
        LoginRequest updatedPerson = peopleRepository.save(person);
        return ResponseEntity.ok(updatedPerson);
    }

    @PostMapping
    public ResponseEntity<LoginRequest> addProduct(@RequestBody LoginRequest product) {
        LoginRequest savedProduct = peopleRepository.save(product);
        return ResponseEntity.status(HttpStatus.CREATED).body(savedProduct);
    }


}